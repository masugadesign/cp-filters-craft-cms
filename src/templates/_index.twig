{# We extract this from the URI to determine which element type we are working with. #}
{% set elementTypeKey = selectedSubnavItem %}
{% set elementClass = craft.cpfilters.getElementClass(elementTypeKey) %}
{# Set variables for all currently available query string parameters. #}
{% set groupId = craft.app.request.getParam('groupId') ?: null %}
{# Fetch an existing batch of filters from the query string or initialize an empty set. #}
{% set filtersParam = craft.app.request.getParam('filters') ?: {0 : {'fieldHandle' : '', 'filterType' : '', 'value' : '' } } %}
{% set limit = groupId ? 50 : 25 %}
{% set offset = craft.app.request.getParam('offset') ?: 0 %}

{#
FILTER OPTIONS
- - - - - - - - - - - - - -
#}

{# Fetch an array of the Entry Type objects that are deemed as filterable in the config. See: `filterableEntryTypeIds` #}
{% set groupOptions = craft.cpfilters.groupOptions(elementTypeKey) %}
{% set fieldOptions = {} %}
{# Was an type/group/volume ID supplied? Fetch its field layout fields. #}
{% set fieldOptions = craft.cpfilters.nativeFieldsByType(elementTypeKey) %}
{% set fields = craft.cpfilters.elementGroupFields(elementTypeKey, groupId) %}
{% for field in fields %}
	{% set fieldOptions = fieldOptions|merge({ (field.handle) : field.name }) %}
{% endfor %}

{#
QUERIES
- - - - - - - - - - - - - -
#}

{# Is it groupId, typeId, volumeId? Make sure we filter by allowable groups. #}
{% set criteria = craft.cpfilters.elementGroupCriteria(elementTypeKey, groupId) %}
{# Add any available filter criteria to the entry query. #}
{% set criteria = filtersParam ? criteria|merge( craft.cpfilters.formatFilterCriteria(filtersParam) ) : criteria %}
{# Orders are sorted differently #}
{% set orderByParam = elementTypeKey == 'orders' ? 'dateOrdered desc' : 'dateCreated desc' %}
{# Get the TOTAL match count without imposing limits. #}
{% set filteredMatches = craft.cpfilters.elementQuery(elementClass, criteria).orderBy(orderByParam).count() %}
{# Only fetch a limited number of results. #}
{% set filteredElements = craft.cpfilters.elementQuery(elementClass, criteria).orderBy(orderByParam).limit(limit).offset(offset).all() %}

{#
PAGINATION
- - - - - - - - - - - - - -
#}

{# set a parameter for the total number of current results. #}
{% set currentResults = filteredElements|length %}
{# Create the pagination links one time so they can be output twice. #}
{% set pagination %}
<div class="filterPagination" >
	{# Show the "previous page" link if we have an offset greater than 0. #}
	{% if offset > 0 %}
		<a href="{{ url('cpfilters/' ~ elementTypeKey, {
			'groupId' : groupId,
			'filters' : filtersParam,
			'limit' : limit,
			'offset' : offset-limit }) }}" class="btn" >&larr; Previous Page</a>
	{% endif %}
	{# Only show the next page if the current results count matches the limit. #}
	{% if currentResults == limit %}
		<a href="{{ url('cpfilters/' ~ elementTypeKey, {
			'groupId' : groupId,
			'filters' : filtersParam,
			'limit' : limit,
			'offset' : offset+limit }) }}" class="btn" >Next Page &rarr;</a>
	{% endif %}
</div>
{% endset %}

{#
OUTPUT
- - - - - - - - - - - - - -
#}

<script type="text/javascript">
window.csrfTokenName = "{{ craft.app.config.general.csrfTokenName }}";
window.csrfTokenValue = "{{ craft.app.request.getCsrfToken }}";
</script>

{# Craft CMS hates bottom margins. #}
<div id="fields" style="margin-bottom:5rem" >

	<form id="filtersForm" method="get" accept-charset="UTF-8" autocomplete="off" >
		<input type="hidden" id="elementTypeKey" value="{{ elementTypeKey }}" >
		<input type="hidden" name="elementType" value="{{ selectedSubnavItem }}">
		{# Some hidden fields we can use to stash some dynamic information. #}
		<input type="hidden" id="fieldFilterOptionsUrl" value="{{ url('cpfilters/field-filter-options') }}" >
		<input type="hidden" id="valueFieldUrl" value="{{ url('cpfilters/value-field') }}" >

		{% include 'cpfilters/_partials/select-group' with {
			'typeKey' : elementTypeKey,
			'groupOptions' : groupOptions,
			'groupId' : groupId
		} %}

		<div id="filterFields" class="filterFields" >
		{% for i,filterData in filtersParam %}
			<div class="filterField" data-idx="{{ i }}" >
				<div class="select" >
					<select name="filters[{{ i }}][fieldHandle]" data-select-field data-idx="{{ i }}" >
						<option value="" >Select Field</option>
					{% for value,label in fieldOptions %}
						<option value="{{ value }}" {% if value == filterData.fieldHandle %}selected="selected"{% endif %} >{{ label|e }}</option>
					{% endfor %}
					</select>
				</div>
				<div class="select" >
					<select name="filters[{{ i }}][filterType]" class="filterType" data-select-filter-type data-idx="{{ i }}" >
					{# Fetch filter options for previously submitted field filters. #}
					{% if filterData.fieldHandle %}
						{# Params : Field handle, the selected filter type #}
						{{ craft.cpfilters.fieldFilterOptions(filterData.fieldHandle, filterData.filterType)|raw }}
					{% else %}
						<option value="" > -- </option>
					{% endif %}
					</select>
				</div>
				<div class="valueFieldContainer" data-idx="{{ i }}" >
					{% include 'cpfilters/_partials/value-field' with {
						'fieldHandle' : filterData.fieldHandle,
						'filterType' : filterData.filterType,
						'fieldValue' : filterData.value ?? '',
						'elementTypeKey' : elementTypeKey,
						'index' : i
					} %}
				</div>
				<a href="#" class="btn" data-remove-filter >-</a>
				<a href="#" class="btn" data-add-filter >+</a>
			</div>
		{% endfor %}
		</div>

		<div class="filterControls" >
			<div class="filterFormControls" >
				<input type="submit" class="btn submit" value="Refresh Results" >&nbsp;
				<a href="{{ url(craft.app.request.pathInfo) }}" class="btn" >Clear Filters</a>
				<a href="#" id="saveFilter" class="btn">Save Filter</a>
			</div>
			<div class="filterExportControls" >
				<input type="submit" class="btn submit" name="exportSubmit" value="Export Total Results" >
			</div>
		</div>
	</form>

	{# Save Filter Modal #}
	<div id="saveFilterModal" class="fitted" style="display:none;">
		<input type="hidden" name="saveFilterAction" value="{{ url('cpfilters/save-filter') }}">
		<input type="hidden" name="userId" value="{{ currentUser.id }}">
		<div class="body">
			<div class="content">
				<div class="sidebar hidden"></div>
				<div class="main">
					<div class="field">
						<div class="heading">
							<label>Filter Title</label>
						</div>
						<input type="text" class="text" name="filterTitle">

					</div>
				</div>
			</div>
		</div>
		<div class="footer">
			<div class="buttons right">
				<button type="button" class="btn" id="closeFilterModal" tabindex="0">Cancel</button>
				<button type="submit" class="btn submit" id="saveFilterButton">Save Filter</button>
			</div>
			<div class="buttons left secondary-buttons"></div>
		</div>
	</div>

	<hr>

	<div class="filterResultsCount">
		Showing <strong>{{ filteredElements|length|number_format(0) }} ({{ (offset+1)|number_format(0) ~ ' - ' ~ (offset+currentResults)|number_format(0) }})</strong> of <strong>{{ filteredMatches|number_format(0) }}</strong> total matches.
	</div>
	{{ pagination|raw }}

	{% include "cpfilters/_lists/#{elementTypeKey}" %}

	{{ pagination|raw }}

</div>
